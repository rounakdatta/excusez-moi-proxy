from sqlalchemy import Column, Integer, String, ForeignKey, DateTime
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base
from pgvector.sqlalchemy import Vector

from datetime import datetime
from app.config.openai import openai_config

Base = declarative_base()

# to store the users registered on this app, often for billing and tracing


class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    email = Column(String, unique=True, index=True)
    password = Column(String)

# to store the embeddings generated by OpenAI, also attributed to the original creator (user)


class Embedding(Base):
    __tablename__ = "embeddings"

    id = Column(Integer, primary_key=True, index=True)
    # the pgvector extension supports only upto 2000 dimensions
    # https://github.com/pgvector/pgvector#what-if-i-want-to-index-vectors-with-more-than-2000-dimensions
    embedding = Column(Vector(openai_config.embedding_max_dimensions))
    embedding_id = Column(String, index=True)
    encoded_raw_payload = Column(String)
    anchor_url = Column(String)
    # content type can be `q` (query) or `d` (document)
    content_type = Column(String)
    requester_id = Column(Integer, ForeignKey("users.id"))
    requester = relationship("User", back_populates="embeddings")
    created_at = Column(DateTime, default=datetime.utcnow())
